
# https://aka.ms/yaml

pr:
  autoCancel: true

trigger:
  - main

pool:
  vmImage: ubuntu-latest


stages:
  - stage: validate
    displayName: "Ensure that the code works"
    jobs:
      - job: audit
        steps:
          - bash: make audit lint
          - bash: make test
            failOnStderr: false

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: JUnit
              testResultsFiles: 'build/reports/report.xml'
              failTaskOnFailedTests: true

          - task: PublishCodeCoverageResults@1
            inputs:
                codeCoverageTool: Cobertura
                summaryFileLocation: 'build/coverage/cobertura-coverage.xml'
                failIfCoverageEmpty: true


  - stage: releaseCandidate
    displayName: "Build the App"
    dependsOn: validate
    jobs:
      - job: "dockerBuild"
        steps:
        - task: Docker@2
          inputs:
            containerRegistry: 'Playpen ACR'
            repository: 'playpen'
            command: 'buildAndPush'
            Dockerfile: 'Dockerfile'
            buildContext: '.'
            tags: |
              latest
              $(Build.BuildId)
  


  - stage: testEnv
    displayName: "Deploy to Test Environment"
    dependsOn: releaseCandidate
    jobs:
      - deployment: testEnv
        displayName: do the deploy to test
        environment: "Test Environment"
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureRmWebAppDeployment@4
                inputs:
                  ConnectionType: 'AzureRM'
                  azureSubscription: 'Azure RM (TF)'
                  appType: 'webAppContainer'
                  WebAppName: 'test-builddoctor-pipeline-playpen'
                  DockerNamespace: 'builddoctorplaypen.azurecr.io'
                  DockerRepository: 'playpen'
                  DockerImageTag: '$(Build.BuildId)'

      - job: testAcceptance
        dependsOn: testEnv
        steps:
          - bash: "./acceptance.sh"
                

      - job: dastScanTest
        dependsOn: testAcceptance
        steps:
          - bash: 'make zap.xml junit.xml'
          - task: PublishBuildArtifacts@1
            inputs:
              pathToPublish: 'zap.html'
              artifactName: 'DAST'
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: 'junit.xml'
              failTaskOnFailedTests: true

  - stage: prodEnv
    displayName: "Deploy to Production Environment"
    dependsOn: testEnv
    jobs:
      - job: prodEnv
        steps:
          - bash: make prodEnv

      - job: dastScanProd
        steps:
          - bash: "dast.sh production"
  
